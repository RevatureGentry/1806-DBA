{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww17520\viewh15800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 --Write SQL Queries that inserts 5 records into the Employee table\
INSERT INTO EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME, TITLE, REPORTSTO, BIRTHDATE)\
VALUES ('10','ALIAH', 'BARANWI', 'STUDENT', '2','18-JUL-94');\
\
--Write SQL Queries that inserts 10 records into the Customer table\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('61', 'TOM', 'SMITH', 'REVATURE', 'TOMSMITH@REVATURE.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('62', 'TOMMY', 'SMITH', 'REVATURE', 'TOMMYSMITH@GMAIL.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('63', 'SARAH', 'SMITH', 'REVATURE', 'SARAHSMTITH@GMAIL.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('64', 'SARA', 'SMITH', 'REVATURE', 'SARASMITH@GMAIL.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('65', 'KATE', 'SMITH', 'REVATURE', 'KATESMITH@REVATURE.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('66', 'KAT', 'SMITH', 'REVATURE', 'KATSMITH@REVATURE.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('67', 'SUNNIE', 'SMITH', 'REVATURE', 'SUNNIESMITH@GMAIL.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('68', 'JEEJEE', 'SMITH', 'REVATURE', 'JEEJEESMITH@REVATURE.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('69', 'COLETTE', 'SMITH', 'REVATURE', 'COLETTESMITH@LIVE.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('70', 'JULIE', 'SMITH', 'REVATURE', 'JULIESMITH@GMAIL.COM');\
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL) VALUES('71', 'JOHN', 'MAYOR', 'REVATURE', 'JOEMAYOER@GMAIL.COM'); \
\
\
--Write SQL Queries that inserts 2 new genres\
INSERT INTO GENRE (GENREID, NAME) VALUES ('26','EDM');\
INSERT INTO GENRE (GENREID,NAME) VALUES ('27','DEEP HOUSE');\
\
--Write SQL Queries that insert 3 of your favorite albums\
INSERT INTO ALBUM (ALBUMID,TITLE, ARTISTID) VALUES ('348','KIDS IN LOVE', '277');\
INSERT INTO ALBUM (ALBUMID,TITLE, ARTISTID) VALUES ('349','THE MARTIN GARRIX COLLECTION', '276');\
INSERT INTO ALBUM (ALBUMID,TITLE, ARTISTID) VALUES ('350','STORIES', '278');\
\
---Write a SQL Query that contains the names of all tracks that are longer than 6 minutes\
SELECT NAME, MILLISECONDS\
FROM TRACK\
WHERE MILLISECONDS > 360000;\
\
--Write a SQL Query to find the biggest song (which takes up the most space)\
SELECT NAME, BYTES\
FROM TRACK \
WHERE BYTES = (SELECT MAX(BYTES) FROM TRACK);\
\
SELECT * FROM TRACK;\
\
--Write a SQL Query that contains the titles of all albums with tracks longer than 6 minutes in them\
\
SELECT A.TITLE, T.MILLISECONDS\
FROM ALBUM A\
INNER JOIN TRACK T ON A.ALBUMID = T.TRACKID\
WHERE T.MILLISECONDS > 360000;\
\
--Write a SQL Query that contains the albumId and number of songs in the album\
\
SELECT A.TITLE AS TITLE, COUNT(A.TITLE) AS NUMBER_OF_SONG\
FROM ALBUM A, TRACK T\
WHERE A.ALBUMID = T.ALBUMID\
GROUP BY A.TITLE;\
\
--Write a SQL query that contains artist's names and the number of tracks they have produced (assume an artist produced a track if it appears in one of their albums)\
\
Select a.name, count(t.albumid) as Track \
FROM ARTIST A \
INNER JOIN ALBUM AL ON A.ARTISTID = AL.ARTISTID\
INNER JOIN TRACK T ON AL.ALBUMID = T.ALBUMID\
GROUP BY A.NAME;\
\
----Write a SQL Query that returns the most purchased media type\
 \
 SELECT MAX(N.TOTALPURCHASED)\
 FROM (;\
 SELECT SUM(N.TOTAL) AS TOTALPURCHASED, \
    MT.NAME AS TITAL\
     FROM TRACK T\
    INNER JOIN INVOICELINE N ON N.TRACKID = T.TRACKID\
    INNER JOIN INVOICE N ON N.INVOICEID = N.INVOICEID\
    INNER JOIN MEDIATYPE MT ON T.MEDIATYPEID = MT.MEDIATYPEID\
    GROUP BY MT.MEDIATYPEID;\
\
--Write a SQL Query showing customers not in the US\
SELECT FIRSTNAME,LASTNAME, COUNTRY \
FROM CUSTOMER\
WHERE COUNTRY != 'USA'; \
\
--Write a SQL Query showing a unique list of billing countries on the Invoice table\
SELECT DISTINCT(BILLINGCOUNTRY) FROM INVOICE;\
\
--Write a SQL Query that shows the Invoice Total, Customer Name, Country, and Sales agent for all invoices and customers\
SELECT V.TOTAL, C.FIRSTNAME , C.LASTNAME, C.COUNTRY, E.FIRSTNAME AS SALES_AGENT, E.LASTNAME AS SALES_AGENTL\
FROM INVOICE V\
INNER JOIN CUSTOMER C ON V.CUSTOMERID = C.CUSTOMERID\
INNER JOIN EMPLOYEE E ON E.EMPLOYEEID = C.SUPPORTREPID;\
\
--Write a SQL Query that shows all Tracks, but displays no IDs. Should also include the Album name, Media Type, and Genre\
SELECT T.NAME, A.TITLE AS ALBUM, M.NAME AS MEDIA_TYPE, G.NAME AS GENRE\
FROM TRACK T\
INNER JOIN ALBUM A ON A.ALBUMID = T.ALBUMID\
INNER JOIN MEDIATYPE M ON M.MEDIATYPEID = T.MEDIATYPEID\
INNER JOIN GENRE G ON G.GENREID = T.GENREID;\
\
--Write a SQL Query that returns the Top 40 Songs for 2013 \
select totInvoice,year, sum(totInvoice) as totSumInvoice\
 FROM (\
        SELECT EXTRACT (year from i.invoicedate)as Year, i.invoiceid as totInvoice , i.total, t.trackid, t.name as songName   FROM Track t \
        INNER JOIN Invoiceline il ON t.trackid = il.trackid\
        INNER JOIN Invoice i ON il.invoiceid = i.invoiceid\
        where EXTRACT (year from i.invoicedate) = 2013)\
Group By totInvoice, year\
order by totSumInvoice desc\
FETCH First 40 Rows Only;\
\
--Write a SQL Query that shows which sales agent made the most in sales overall\
\
SELECT \
    MAX(Sales) as Sales\
FROM \
  (SELECT\
      e.FirstName as First, e.lastname as Last,\
      SUM(i.Total) as Sales\
      FROM Customer c\
      INNER JOIN Employee e on e.EmployeeId = c.SupportRepId\
      INNER JOIN Invoice i on i.CustomerId = c.CustomerId\
      GROUP BY e.EmployeeId, e.FirsTNAME , e.LASTNAME); \
      \
--Write a SQL Query that shows the top 3 best selling artists\
SELECT A.NAME,\
    COUNT (IV.TRACKID) AS TRACK_SOLD,\
    SUM (IV.UNITPRICE) AS TOTAL_SALE\
    FROM ALBUM AB\
    INNER JOIN ARTIST A ON A.ARTISTID = AB.ARTISTID\
    INNER JOIN TRACK T ON T.ALBUMID = AB.ALBUMID\
    INNER JOIN INVOICELINE IV ON IV.TRACKID = T.TRACKID\
    GROUP BY A.NAME\
    ORDER BY TOTAL_SALE DESC\
    FETCH FIRST 3 ROWS ONLY;\
\
--Write a SQL Query that returns which albums have no Heavy Metal tracks\
\
SELECT DISTINCT(AB.TITLE)  \
FROM TRACK T\
INNER JOIN GENRE G ON G.GENREID = T.GENREID\
INNER JOIN ALBUM AB ON T.ALBUMID = AB.ALBUMID\
WHERE G.name != ('HEAVY METAL');\
\
---Write a SQL Query to find the the managers of employees supporting Brazilian customers\
SELECT E.FIRSTNAME, E.LASTNAME, E.TITLE \
    FROM EMPLOYEE E;\
    \
       SELECT DISTINCT m.firstname, m.lastname\
   from employee m inner join employee e on m.employeeid=e.REPORTSTO\
   inner join customer c on e.employeeid=c.supportrepid\
   where c.country like 'Brazil';\
   \
    \
--Write a SQL Query that determines which artist has the most songs in each playlist\
SELECT\
    DISTINCT(ar.name) as Artist,\
    count(t.trackid) as Tracks,\
    pl.name as Playlist\
From Artist ar \
INNER JOIN album al \
on ar.artistid = al.artistid\
INNER JOIN track t \
on al.albumid = t.albumid\
INNER JOIN playlisttrack pt \
on pt.trackid = t.trackid \
INNER JOIN playlist pl \
on pl.playlistid = pt.playlistid \
Group by ar.name, pl.name\
Order by ar.name;\
\
\
-- Write a SQL Query that determines what song(s) appear in the most playlists\
\
SELECT *\
    From (SELECT t.name as Songs,\
    count(pt.trackid) as Tracks\
    From Track t \
INNER JOIN playlisttrack pt \
on pt.trackid = t.trackid \
Group by t.name\
ORDER BY TRACKS desc)\
FETCH FIRST 10 ROW ONLY;\
\
--Write a SQL Query that determines the 5th highest grossing song in 2009, 2010, 2011, 2012, and 2013\
--Write a SQL Query that determines the most downloaded genre by country\
--Write a SQL Query that determines the genres each salesperson contributes to most}