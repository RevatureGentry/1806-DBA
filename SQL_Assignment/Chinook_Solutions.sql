--Chinook Assessment
--Please have the following inside a single script Chinook_Solutions.sql by Monday morning

--Write SQL Queries that inserts 5 records into the Employee table

INSERT INTO EMPLOYEE
    (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES
    (9, 'Cole', 'Dude', 'IT Support 2', 1, '01-JAN-92', '01-FEB-18', '3030 Pine Ave', 'Dallas', 'Tx', 'USA', '75000', '+1 (123) 456-7890', '+1 (456) 789-1011', 'cole@chinookcorp.com');

INSERT INTO EMPLOYEE
    (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES
    (10, 'Brett', 'Guy', 'Business Support 2', 2, '05-FEB-80', '01-OCT-15', '123 Glenn Ave', 'Plano', 'Tx', 'USA', '75001', '+1 (123) 789-0456', '+1 (456) 101-1213', 'brett@chinookcorp.com');

INSERT INTO EMPLOYEE
    (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES
    (11, 'Monica', 'Gal', 'Business Support 1', 2, '10-OCT-90', '15-JAN-14', '321 Sherry Ln', 'Richland', 'Tx', 'USA', '75002', '+1 (123) 101-1517', '+1 (456) 354-0212', 'monica@chinookcorp.com');

INSERT INTO EMPLOYEE
    (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES
    (12, 'Danielle', 'Britt', 'IT Support 2', 1, '31-DEC-95', '20-FEB-17', '846 Prince Dr', 'Oak Cliff', 'Tx', 'USA', '75003', '+1 (123) 875-6549', '+1 (456) 849-8364', 'danielle@chinookcorp.com');

INSERT INTO EMPLOYEE
    (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES
    (13, 'Sara', 'Cross', 'Business Manager', 3, '13-MAR-78', '15-JUN-11', '5432 East Dr', 'McKinney', 'Tx', 'USA', '75004', '+1 (123) 871-1948', '+1 (456) 891-94646', 'sara@chinookcorp.com');

--Write SQL Queries that inserts 10 records into the Customer table

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(59, 'Marjorie', 'Binion', 'Tagcat', '3260 Portage Terrace', 'Jamaica', 'NY', 'US', '11480', '+1 (718) 860-3600', '+1 (406) 488-2634', 'mbinion0@weibo.com', 1);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(60, 'Nadiya', 'Bedells', 'Npath', '614 Little Fleur Plaza', 'Wichita', 'KS', 'US', '67236', '+1 (316) 617-0965', '+1 (806) 582-0498', 'nbedells1@pcworld.com', 2);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES 
(61, 'Lucilia', 'Yezafovich', 'Fivechat', '3 Bartelt Plaza', 'Houston', 'TX', 'US', '77085', '+1 (713) 955-8762', '+1 (718) 699-3335', 'lyezafovich2@cnet.com', 3);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES 
(62, 'Beatrisa', 'Mc Ilory', 'Youbridge', '7 Kensington Place', 'Denver', 'CO', 'US', '80217', '+1 (303) 829-2166', '+1 (901) 387-0779', 'bmcilory3@plala.or.jp', 4);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(63, 'Daffy', 'Mealand', 'Skivee', '9 Ridgeview Drive', 'Houston', 'TX', 'US', '77085', '+1 (281) 526-2743', '+1 (812) 630-5163', 'dmealand4@chicagotribune.com', 5);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(64, 'Matt', 'Basilone', 'Photospace', '5 Westport Place', 'Seattle', 'WA', 'US', '98115', '+1 (425) 503-5363', '+1 (712) 189-7025', 'mbasilone5@berkeley.edu', 6);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(65, 'Bron', 'Luckcuck', 'Skidoo', '03862 Acker Trail', 'Albany', 'NY', 'US', '12255', '+1 (518) 881-0146', '+1 (617) 605-1409', 'bluckcuck6@ehow.com', 7);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(66, 'Murvyn', 'Genever', 'Youfeed', '051 Northfield Park', 'Kalamazoo', 'MI', 'US', '49048', '+1 (269) 399-7759', '+1 (505) 363-7791', 'mgenever7@tmall.com', 8);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(67, 'Dorelle', 'Lindroos', 'Jatri', '0 Sugar Terrace', 'Gainesville', 'FL', 'US', '32605', '+1 (352) 148-3225', '+1 (254) 740-0319', 'dlindroos8@nps.gov', 9);

INSERT INTO CUSTOMER
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES
(68, 'Fidel', 'Fausch', 'Skippad', '51 7th Circle', 'Memphis', 'TN', 'US', '38197', '+1 (901) 876-6350', '+1 (862) 489-4808', 'ffausch9@gizmodo.com', 10);


--Write SQL Queries that inserts 2 new genres

INSERT INTO GENRE
    (GENREID, NAME)
VALUES
    (26, 'Garage');
    
INSERT INTO GENRE
    (GENREID, NAME)
VALUES
    (27, 'Afro-Caribbean Dance');

--Write SQL Queries that insert 3 of your favorite albums

INSERT INTO ALBUM
    (ALBUMID, TITLE, ARTISTID)
VALUES
    (348, 'Golden Album', 85);

INSERT INTO ALBUM
    (ALBUMID, TITLE, ARTISTID)
VALUES
    (349, 'All Time Hits', 85);
    
INSERT INTO ALBUM
    (ALBUMID, TITLE, ARTISTID)
VALUES
    (350, 'Best of Sinatra', 85);
    

--Write a SQL Query that contains the names of all tracks that are longer than 6 minutes

SELECT 
    NAME, MILLISECONDS AS LENGTH
    FROM TRACK
    WHERE (MILLISECONDS/60000) > 6;

--Write a SQL Query to find the biggest song (which takes up the most space)

SELECT
    NAME AS SONG_NAME, BYTES AS SONG_SIZE
    FROM TRACK
    WHERE BYTES = (SELECT MAX(BYTES) FROM TRACK);

--Write a SQL Query that contains the titles of all albums with tracks longer than 6 minutes in them

SELECT DISTINCT A.TITLE AS ALBUMNAME, T.MILLISECONDS AS LENGTH
FROM ALBUM A
INNER JOIN TRACK T ON A.ALBUMID = T.ALBUMID
WHERE (T.MILLISECONDS/60000) > 6;

--Write a SQL Query that contains the albumId and number of songs in the album

SELECT ALBUMID, COUNT(TRACK) AS NUM_0F_SONGS
FROM TRACK
GROUP BY ALBUMID;

--Write a SQL query that contains artist's names and the number of tracks they have produced (assume an artist produced a track if it appears in one of their albums)

SELECT ARTIST.NAME AS ARTIST, COUNT(TRACK.TRACKID) AS NUMBER_OF_SONGS
FROM ARTIST INNER JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID
INNER JOIN TRACK ON ALBUM.ALBUMID = TRACK.ALBUMID
GROUP BY ARTIST.NAME;

--Write a SQL Query that returns the most purchased media type

SELECT * FROM
    (SELECT MEDIATYPE.NAME, COUNT(INVOICELINE.TRACKID) AS NUMBER_OF_PURCHASES
        FROM MEDIATYPE
        INNER JOIN TRACK
        ON MEDIATYPE.MEDIATYPEID = TRACK.MEDIATYPEID
        INNER JOIN INVOICELINE
        ON TRACK.TRACKID = INVOICELINE.TRACKID
        GROUP BY MEDIATYPE.NAME
        ORDER BY NUMBER_OF_PURCHASES DESC)
WHERE ROWNUM = 1;

--Write a SQL Query showing customers not in the US

SELECT FIRSTNAME, LASTNAME, COUNTRY
FROM CUSTOMER
WHERE COUNTRY <> 'USA';

--Write a SQL Query showing a unique list of billing countries on the Invoice table

SELECT DISTINCT BILLINGCOUNTRY
FROM INVOICE;

--Write a SQL Query that shows the Invoice Total, Customer Name, Country, and Sales agent for all invoices and customers

SELECT INVOICE.TOTAL AS INVOICE_TOTAL, (CUSTOMER.FIRSTNAME || ' ' || CUSTOMER.LASTNAME) AS CUSTOMER_NAME, CUSTOMER.COUNTRY, (EMPLOYEE.FIRSTNAME || ' ' || EMPLOYEE.LASTNAME) AS EMPLOYEE_NAME
FROM INVOICE
INNER JOIN CUSTOMER
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID
INNER JOIN EMPLOYEE
ON CUSTOMER.SUPPORTREPID = EMPLOYEE.EMPLOYEEID;

--Write a SQL Query that shows all Tracks, but displays no IDs. Should also include the Album name, Media Type, and Genre

SELECT TRACK.NAME AS SONG_NAME, ALBUM.TITLE AS ALBUM_NAME, MEDIATYPE.NAME AS MEDIA_TYPE, GENRE.NAME AS GENRE
FROM TRACK
LEFT JOIN ALBUM
ON TRACK.ALBUMID = ALBUM.ALBUMID
LEFT JOIN MEDIATYPE
ON TRACK.MEDIATYPEID = MEDIATYPE.MEDIATYPEID
LEFT JOIN GENRE
ON TRACK.GENREID = GENRE.GENREID;

--Write a SQL Query that returns the Top 40 Songs for 2013

SELECT *
FROM
    (SELECT TRACK.NAME AS SONG, COUNT(INVOICELINE.TRACKID) AS COUNT
    FROM TRACK
    INNER JOIN INVOICELINE
    ON TRACK.TRACKID = INVOICELINE.TRACKID
    INNER JOIN INVOICE
    ON INVOICELINE.INVOICEID = INVOICE.INVOICEID
    WHERE INVOICE.INVOICEDATE BETWEEN '01-JAN-13' AND '31-DEC-13'
    GROUP BY TRACK.NAME
    ORDER BY COUNT DESC)
WHERE ROWNUM <= 40;

--Write a SQL Query that shows which sales agent made the most in sales overall

SELECT SALES_AGENT, SALES
FROM
    (SELECT EMPLOYEE.EMPLOYEEID, (EMPLOYEE.FIRSTNAME || ' ' || EMPLOYEE.LASTNAME) AS SALES_AGENT, SUM(INVOICE.TOTAL) AS SALES
    FROM EMPLOYEE
    INNER JOIN CUSTOMER
    ON EMPLOYEE.EMPLOYEEID = CUSTOMER.SUPPORTREPID
    INNER JOIN INVOICE
    ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
    GROUP BY EMPLOYEE.EMPLOYEEID, (EMPLOYEE.FIRSTNAME || ' ' || EMPLOYEE.LASTNAME)
    ORDER BY SALES DESC)
WHERE ROWNUM = 1;

--Write a SQL Query that shows the top 3 best selling artists

SELECT ARTIST_NAME, COUNT
FROM
    (SELECT ARTIST.ARTISTID, ARTIST.NAME AS ARTIST_NAME, COUNT(TRACK.TRACKID) AS COUNT
    FROM ARTIST
    INNER JOIN ALBUM
    ON ARTIST.ARTISTID = ALBUM.ARTISTID
    INNER JOIN TRACK
    ON ALBUM.ALBUMID = TRACK.ALBUMID
    INNER JOIN INVOICELINE
    ON TRACK.TRACKID = INVOICELINE.TRACKID
    GROUP BY ARTIST.ARTISTID, ARTIST.NAME
    ORDER BY COUNT DESC)
WHERE ROWNUM <= 3;

--Write a SQL Query that returns which albums have no Heavy Metal tracks

SELECT DISTINCT ALBUM.ALBUMID, ALBUM.TITLE AS ALBUM_NAME, GENRE.NAME AS GENRE
FROM ALBUM
INNER JOIN TRACK
ON ALBUM.ALBUMID = TRACK.ALBUMID
INNER JOIN GENRE
ON TRACK.GENREID = GENRE.GENREID
WHERE GENRE.NAME <> 'Heavy Metal';

--Write a SQL Query to find the the managers of employees supporting Brazilian customers

SELECT DISTINCT(M.EMPLOYEEID), (M.FIRSTNAME || ' ' || M.LASTNAME) AS MANAGER
FROM EMPLOYEE M
INNER JOIN EMPLOYEE E
ON M.EMPLOYEEID = E.REPORTSTO
INNER JOIN CUSTOMER C
ON E.EMPLOYEEID = C.SUPPORTREPID
WHERE C.COUNTRY = 'Brazil';

--Write a SQL Query that determines which artist has the most songs in each playlist
SELECT ARTIST_NAME, COUNT
FROM
    (SELECT ARTIST.ARTISTID, ARTIST.NAME AS ARTIST_NAME, COUNT(PLAYLISTTRACK.TRACKID) AS COUNT
    FROM ARTIST
    INNER JOIN ALBUM
    ON ARTIST.ARTISTID = ALBUM.ARTISTID
    INNER JOIN TRACK
    ON ALBUM.ALBUMID = TRACK.ALBUMID
    INNER JOIN PLAYLISTTRACK
    ON TRACK.TRACKID = PLAYLISTTRACK.TRACKID
    GROUP BY ARTIST.ARTISTID, ARTIST.NAME
    ORDER BY COUNT DESC)
WHERE ROWNUM = 1;

--Write a SQL Query that determines what song(s) appear in the most playlists

SELECT SONG_NAME, NUMBER_OF_PLAYLISTS
FROM
    (SELECT TRACK.TRACKID, TRACK.NAME AS SONG_NAME, COUNT(PLAYLISTTRACK.TRACKID) AS NUMBER_OF_PLAYLISTS
    FROM TRACK
    INNER JOIN PLAYLISTTRACK
    ON TRACK.TRACKID = PLAYLISTTRACK.TRACKID
    GROUP BY TRACK.TRACKID, TRACK.NAME
    ORDER BY NUMBER_OF_PLAYLISTS DESC)
WHERE ROWNUM <= 50;

--Write a SQL Query that determines the 5th highest grossing song in 2009, 2010, 2011, 2012, and 2013


--Write a SQL Query that determines the most downloaded genre by country


--Write a SQL Query that determines the genres each salesperson contributes to most


